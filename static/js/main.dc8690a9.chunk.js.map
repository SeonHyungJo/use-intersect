{"version":3,"sources":["../../src/index.tsx","../../src/util/index.ts","App.js","index.js"],"names":["initalOptions","root","rootMargin","threshold","onIntersect","customOptions","observer","targetRef","observerOptions","window","IntersectionObserver","entries","forEach","entry","isIntersecting","target","unobserve","setTimeout","targetEle","top","bottom","upThreshold","innerHeight","getComputedStyle","display","filter","diffObserve","length","document","removeEventListener","addEventListener","observe","setElement","push","intersectionObserver","current","option","App","customeRef","useIntersect","console","log","className","ref","ReactDOM","render","getElementById"],"mappings":"gLASMA,G,KAAiC,CACrCC,KAAM,KACNC,WAAY,MACZC,UAAW,I,EAGQ,SACnBC,EACAC,GAEA,IAEIC,EAFEC,EAAY,mBACZC,EAAmCH,GAAiBL,EAa1D,OAVA,qBAAU,WACRM,EClBgC,SAACF,EAAuBI,GAC1D,GAAI,yBAA0BC,OAAQ,CACpC,IAAM,EAAW,IAAIC,sBAAqB,SAACC,GACzCA,EAAQC,SAAQ,SAACC,GACXA,EAAMC,iBACRV,EAAYS,EAAME,QAClB,EAASC,UAAUH,EAAME,cAG5BP,GAEH,OAAO,EAEP,IAAI,GAAS,EACT,EAA+B,GAC3B,IAAAL,UAAA,iBAEF,EAAW,SAAX,KACW,IAAX,IACF,GAAS,EAETc,YAAW,WACT,EAAaL,SAAQ,SAACM,GACd,gCAAEC,EAAA,EAAAA,IAAKC,EAAA,EAAAA,OAEPC,EAAcF,GAAOC,EAASD,IAAQ,EAAI,IAG7CA,GAAO,GAJYA,GAAOC,EAASD,GAAO,GAIbV,OAAOa,aAAeF,GAAU,GAC1DC,GAAe,GAAKD,GAAUX,OAAOa,cAEsB,SAAxCC,iBAAiBL,GAAWM,UACnDpB,EAAYc,GAMgB,KAJ5B,EAAe,EAAaO,QAAO,SAACC,GAClC,OAAOA,IAAgBR,MAGRS,SACfC,SAASC,oBAAoB,SAAU,GACvCpB,OAAOoB,oBAAoB,SAAU,GACrCpB,OAAOoB,oBAAoB,oBAAqB,QAItD,GAAS,IACR,OAQP,OAJAD,SAASE,iBAAiB,SAAU,GACpCrB,OAAOqB,iBAAiB,SAAU,GAClCrB,OAAOqB,iBAAiB,oBAAqB,GAEtC,CACLC,QAAS,SAACC,GACR,EAAaC,KAAKD,KDtCXE,CAAqB9B,EAAaI,MAG/C,qBAAU,WACU,OAAdD,GACFD,EAASyB,QAAQxB,EAAU4B,WAE5B,CAAC5B,IAEGA,GE7BH6B,EAAS,CACbjC,UAAW,IAoCEkC,EAjCH,WACV,IAIMC,EAAaC,GAJK,SAACxB,GACvByB,QAAQC,IAAI,YAAa1B,KAGsBqB,GAEjD,OACE,oCACE,yBAAKM,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKC,IAAKL,EAAYI,UAAW,cACjC,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,cC/BtBE,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,U","file":"static/js/main.dc8690a9.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { intersectionObserver, CustomObserve } from \"./util\";\n\nexport interface ObserverOptions {\n  root?: Element | null;\n  rootMargin?: string;\n  threshold?: number;\n}\n\nconst initalOptions: ObserverOptions = {\n  root: null,\n  rootMargin: \"0px\",\n  threshold: 0\n};\n\nconst useIntersect = (\n  onIntersect: Function,\n  customOptions?: ObserverOptions\n) => {\n  const targetRef = useRef<any>();\n  const observerOptions: ObserverOptions = customOptions || initalOptions;\n  let observer: IntersectionObserver | CustomObserve;\n\n  useEffect(() => {\n    observer = intersectionObserver(onIntersect, observerOptions);\n  });\n\n  useEffect(() => {\n    if (targetRef !== null) {\n      observer.observe(targetRef.current as Element);\n    }\n  }, [targetRef]);\n\n  return targetRef;\n};\n\nexport default useIntersect;\n","import { ObserverOptions } from \"../index\"\n\nexport interface CustomObserve {\n  observe: Function\n}\n\nexport const intersectionObserver = (onIntersect: Function, observerOptions: ObserverOptions) => {\n  if (\"IntersectionObserver\" in window) {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry: IntersectionObserverEntry) => {\n        if (entry.isIntersecting) {\n          onIntersect(entry.target)\n          observer.unobserve(entry.target);\n        }\n      })\n    }, observerOptions)\n\n    return observer\n  } else {\n    let active = false;\n    let observedList: Array<Element> = []\n    const { threshold = 0 } = observerOptions\n\n    const observer = () => {\n      if (active === false) {\n        active = true;\n\n        setTimeout(() => {\n          observedList.forEach((targetEle: Element) => {\n            const { top, bottom } = targetEle.getBoundingClientRect()\n            const downThreshold = top + (bottom - top) * threshold\n            const upThreshold = top + (bottom - top) * (1 - threshold)\n\n            const thresholdChecking =\n              (top >= 0 && downThreshold <= window.innerHeight && bottom >= 0)\n              || (upThreshold >= 0 && bottom <= window.innerHeight)\n\n            if (thresholdChecking && getComputedStyle(targetEle).display !== \"none\") {\n              onIntersect(targetEle)\n\n              observedList = observedList.filter((diffObserve) => {\n                return diffObserve !== targetEle;\n              });\n\n              if (observedList.length === 0) {\n                document.removeEventListener(\"scroll\", observer);\n                window.removeEventListener(\"resize\", observer);\n                window.removeEventListener(\"orientationchange\", observer);\n              }\n            }\n          });\n          active = false;\n        }, 200);\n      }\n    };\n\n    document.addEventListener(\"scroll\", observer);\n    window.addEventListener(\"resize\", observer);\n    window.addEventListener(\"orientationchange\", observer);\n\n    return {\n      observe: (setElement: Element): void => {\n        observedList.push(setElement)\n      }\n    }\n  }\n}\n","import React from 'react'\n\nimport useIntersect from 'use-intersect'\n\nconst option = {\n  threshold: 0.8\n}\n\nconst App = () => {\n  const onIntersectFunc = (target) => {\n    console.log('intersect', target)\n  }\n\n  const customeRef = useIntersect(onIntersectFunc, option)\n\n  return (\n    <>\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div ref={customeRef} className={'targetDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n    </>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}