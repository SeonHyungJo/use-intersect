{"version":3,"sources":["../../src/index.tsx","../../src/util/index.ts","App.js","index.js"],"names":["initalOptions","root","rootMargin","threshold","onIntersect","observer","rootOptions","once","targetRef","observerOptions","window","IntersectionObserver","entries","forEach","entry","isIntersecting","target","unobserve","setTimeout","targetEle","getBoundingClientRect","top","bottom","upThreshold","innerHeight","getComputedStyle","display","filter","diffObserve","length","document","removeEventListener","addEventListener","observe","setElement","push","intersectionObserver","current","option","App","customeRef","useIntersect","console","log","className","ref","ReactDOM","render","getElementById"],"mappings":"gLAcMA,G,KAAiC,CACrCC,KAAM,KACNC,WAAY,MACZC,UAAW,I,EAGQ,SACnBC,EACA,G,IAIIC,EAJFC,EAAW,cAAE,IAAAC,YAAI,IAAG,GAAI,EAEpBC,EAAY,mBACZC,EAAmCH,GAAeN,EAaxD,OAVA,qBAAU,WACRK,EClBgC,SAACD,EAAuB,G,IAAEK,EAAe,kBAAEF,EAAI,OACjF,GAAI,yBAA0BG,OAAQ,CACpC,IAAM,EAAW,IAAIC,sBAAqB,SAACC,GACzCA,EAAQC,SAAQ,SAACC,GACXA,EAAMC,iBACRX,EAAYU,EAAME,QACdT,GACF,EAASU,UAAUH,EAAME,cAI9BP,GAEH,OAAO,EAEP,IAAI,GAAS,EACT,EAA+B,GAC3B,EAAkBA,EAAL,UAAb,OAAS,IAAG,IAAC,EAEf,EAAW,SAAX,KACW,IAAX,IACF,GAAS,EAETS,YAAW,WACT,EAAaL,SAAQ,SAACM,GACd,MAAkBA,EAAUC,wBAA1BC,EAAG,MAAEC,EAAM,SAEbC,EAAcF,GAAOC,EAASD,IAAQ,EAAI,IAG7CA,GAAO,GAJYA,GAAOC,EAASD,GAAO,GAIbX,OAAOc,aAAeF,GAAU,GAC1DC,GAAe,GAAKD,GAAUZ,OAAOc,cAEsB,SAAxCC,iBAAiBN,GAAWO,UACnDtB,EAAYe,GAERZ,GAK0B,KAJ5B,EAAe,EAAaoB,QAAO,SAACC,GAClC,OAAOA,IAAgBT,MAGRU,SACfC,SAASC,oBAAoB,SAAU,GACvCrB,OAAOqB,oBAAoB,SAAU,GACrCrB,OAAOqB,oBAAoB,oBAAqB,QAKxD,GAAS,IACR,OAQP,OAJAD,SAASE,iBAAiB,SAAU,GACpCtB,OAAOsB,iBAAiB,SAAU,GAClCtB,OAAOsB,iBAAiB,oBAAqB,GAEtC,CACLC,QAAS,SAACC,GACR,EAAaC,KAAKD,KD1CXE,CAAqBhC,EAAa,CAAEK,gBAAe,EAAEF,KAAI,OAGtE,qBAAU,WACU,OAAdC,GACFH,EAAS4B,QAAQzB,EAAU6B,WAE5B,CAAC7B,IAEGA,GElCH8B,EAAS,CACbnC,UAAW,IAoCEoC,EAjCH,WACV,IAIMC,EAAaC,GAJK,SAACzB,GACvB0B,QAAQC,IAAI,YAAa3B,KAGsB,CAAEV,YAAagC,EAAQ/B,MAAM,IAE9E,OACE,oCACE,yBAAKqC,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKC,IAAKL,EAAYI,UAAW,cACjC,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,YAChB,yBAAKA,UAAW,cC/BtBE,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,U","file":"static/js/main.f2ed7ed4.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { intersectionObserver, CustomObserve } from \"./util\";\n\nexport interface ObserverOptions {\n  root?: Element | null;\n  rootMargin?: string;\n  threshold?: number;\n}\n\nexport interface IntersectOptions {\n  rootOptions?: ObserverOptions;\n  once?: boolean;\n}\n\nconst initalOptions: ObserverOptions = {\n  root: null,\n  rootMargin: \"0px\",\n  threshold: 0\n};\n\nconst useIntersect = (\n  onIntersect: Function,\n  { rootOptions, once = true }: IntersectOptions\n) => {\n  const targetRef = useRef<any>();\n  const observerOptions: ObserverOptions = rootOptions || initalOptions;\n  let observer: IntersectionObserver | CustomObserve;\n\n  useEffect(() => {\n    observer = intersectionObserver(onIntersect, { observerOptions, once });\n  });\n\n  useEffect(() => {\n    if (targetRef !== null) {\n      observer.observe(targetRef.current as Element);\n    }\n  }, [targetRef]);\n\n  return targetRef;\n};\n\nexport default useIntersect;\n","import { ObserverOptions } from \"../index\"\n\nexport interface OserverOptions {\n  observerOptions: ObserverOptions,\n  once: boolean\n}\n\nexport interface CustomObserve {\n  observe: Function\n}\n\nexport const intersectionObserver = (onIntersect: Function, { observerOptions, once }: OserverOptions) => {\n  if (\"IntersectionObserver\" in window) {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry: IntersectionObserverEntry) => {\n        if (entry.isIntersecting) {\n          onIntersect(entry.target)\n          if (once) {\n            observer.unobserve(entry.target);\n          }\n        }\n      })\n    }, observerOptions)\n\n    return observer\n  } else {\n    let active = false;\n    let observedList: Array<Element> = []\n    const { threshold = 0 } = observerOptions\n\n    const observer = () => {\n      if (active === false) {\n        active = true;\n\n        setTimeout(() => {\n          observedList.forEach((targetEle: Element) => {\n            const { top, bottom } = targetEle.getBoundingClientRect()\n            const downThreshold = top + (bottom - top) * threshold\n            const upThreshold = top + (bottom - top) * (1 - threshold)\n\n            const thresholdChecking =\n              (top >= 0 && downThreshold <= window.innerHeight && bottom >= 0)\n              || (upThreshold >= 0 && bottom <= window.innerHeight)\n\n            if (thresholdChecking && getComputedStyle(targetEle).display !== \"none\") {\n              onIntersect(targetEle)\n\n              if (once) {\n                observedList = observedList.filter((diffObserve) => {\n                  return diffObserve !== targetEle;\n                });\n\n                if (observedList.length === 0) {\n                  document.removeEventListener(\"scroll\", observer);\n                  window.removeEventListener(\"resize\", observer);\n                  window.removeEventListener(\"orientationchange\", observer);\n                }\n              }\n            }\n          });\n          active = false;\n        }, 200);\n      }\n    };\n\n    document.addEventListener(\"scroll\", observer);\n    window.addEventListener(\"resize\", observer);\n    window.addEventListener(\"orientationchange\", observer);\n\n    return {\n      observe: (setElement: Element): void => {\n        observedList.push(setElement)\n      }\n    }\n  }\n}\n","import React from 'react'\n\nimport useIntersect from 'use-intersect'\n\nconst option = {\n  threshold: 0.8\n}\n\nconst App = () => {\n  const onIntersectFunc = (target) => {\n    console.log('intersect', target)\n  }\n\n  const customeRef = useIntersect(onIntersectFunc, { rootOptions: option, once: false })\n\n  return (\n    <>\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div ref={customeRef} className={'targetDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n      <div className={'testDiv'} />\n    </>\n  )\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}